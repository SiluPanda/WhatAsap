Your goal is to implement a simple Whatsapp-like application WhatASap. To this end, you do the following:

    Write a script create.sql to create tables. The schema is described below.
        create table users(
            uid varchar(10) primary key,
            name varchar(20),
            phone varchar(10));
        create table conversations(
             uid1 varchar(10) references users,
             uid2 varchar(10) references users,
             thread_id serial,
             primary key (uid1, uid2),
             unique(thread_id),  
             check (uid1 < uid2));.
        Note 1: Since a conversation is shared between two users and should not depend on the order in which the uids appear, ensure uid1 < uid2 by swapping the IDs if they are not in ascending order.
        Note 2: thread_id is defined as type serial, which creates a new value for each tuple that is inserted into conversations.
        create table posts (
            post_id serial primary key,
            thread_id integer references conversations(thread_id),
            uid varchar(10) references users,
            timestamp timestamp,
            text varchar(256)
        );
        Also fill in data for user and follows to demonstrate the interfaces described below.  Create a file data.sql with insert statements for sample data.
        You can use auto increment annotations or sequences, instead of the “serial” type fields, if you want.  

    When a user logs in (use the login code from the inclass assignment), they are directed to a home page which is defined as below.

    The home page displays:

        A form to create new conversations, which takes in a user ID and invokes a servlet createConversation, which creates a new conversation. Assume for simplicity that all users present in the users table are automatically registered on WhatASap.   When a user name ID is input, a new conversation is created with that user (if it does not already exist). A confirmation/error message is displayed, along with a link to go back to the home page.

        Display an entry for each of the user’s conversations, along with the other user’s name, last message (if any) in that conversation, and its timestamp.  Conversations can be displayed with most recent first; make sure nulls (conversations without any messages) are sorted last.
        Each entry should also have a link  to show ConversationDetails as described below, with threadid as a GET parameter.

        ConversationDetails: A servlet that displays all the messages in the conversation passed as GET parameter, sorted by their timestamp in decreasing order. The servlet also contains a form to create a new message, by invoking a NewMessage servlet.  The Servlet should check that the user is part of the conversation.

        The New Message servlet posts the submitted message to the conversation.  Upon sucessful submit, the servlet redirects back to the ConversationDetails servlet, which shows the conversation updated with the new message.

        Again, make sure that all servlets other than the Login servlet should check for authentication via the session variable before doing any other processing, and should redirect to the login servlet in case the user is not logged in.
